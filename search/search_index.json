{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This documentation is designed to help guide you through the basic features of the PyCharm IDE. PyCharm is an environment that helps users program in Python. It helps users with code analysis, debugging code, testing code, and more. By the end of this documentation, you will have learned the following:</p> <ul> <li>Creating a new project folder.</li> <li>Writing and running code.</li> <li>Debugging the code.</li> <li>Creating a GitHub repository.</li> <li>How to use the git controls.</li> </ul>"},{"location":"#target-users","title":"Target Users","text":"<ul> <li>New PyCharm users learning how to start writing their code.</li> <li>Intermediate users learning how to debug and create repositories.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Before continuing on with the documentation, you must have completed the following:</p> <ul> <li>Downloaded the PyCharm IDE</li> <li>Created a GitHub account (optional)</li> </ul>"},{"location":"#messages","title":"Messages","text":"<p>In this documentation, you will encounter messages that contain information to help guide you.</p> <p>Info</p> <p>Informs readers of additional information.</p> <p>Success</p> <p>Lets readers know what they have completed.</p> <p>You can now move on to the first section of this documentation by clicking on the 'Next' button below me. Good Luck .  </p>"},{"location":"pages/creating-repo/","title":"Creating a GitHub Repository","text":""},{"location":"pages/creating-repo/#overview","title":"Overview","text":"<p>In this section, you will learn how to create a GitHub repository for your Python code through your Pycharm IDE. GitHub is an online hosting service that allows users save their work in repositories. This is used by many programmers in order for them to collaborate and work on the same projects together. This also assists programmers in keeping track of the past versions of their code, so whenever they need to recover a piece of code, it can easily be found in the repository.</p>"},{"location":"pages/creating-repo/#requirements","title":"Requirements","text":"<p>Before proceeding with the instructions, you must have the following:</p> <ul> <li>A GitHub account</li> <li>A Python project in PyCharm</li> </ul>"},{"location":"pages/creating-repo/#adding-your-github-account","title":"Adding your GitHub Account","text":"<p>The first thing you need to do is to connect your GitHub account to PyCharm. This allows the IDE to know where to share the project to whenever you make a repository for your projects.</p> <ol> <li> <p>Open up the project you want to save in GitHub. </p> </li> <li> <p>Open up your 'Settings' by going down to the 'File' dropdown.  </p> </li> <li> <p>Click on 'GitHub' in the 'Version Control' dropdown. </p> </li> <li> <p>Click on the plus button at the top left of the menu and login to your GitHub account. </p> </li> <li> <p>Click 'Ok' to apply your changes. </p> </li> </ol> <p>Success</p> <p>You have successfully added your GitHub account to your PyCharm IDE. You can now make a repository for your project.</p>"},{"location":"pages/creating-repo/#creating-a-repository","title":"Creating a Repository","text":"<p>After adding your account to PyCharm, you now need to create a repository for your project. A repository is somewhat of a storage that contains all your files and history of your project. By creating a repository, you will be able to share your project to your GitHub account.</p> <ol> <li> <p>Click on 'VCS' and then 'Create Git Repository' </p> </li> <li> <p>Click 'Ok' to finish creating your repository. </p> </li> </ol> <p>Success</p> <p>You have successfully created a repository for your Python project.</p>"},{"location":"pages/creating-repo/#connecting-project-to-github","title":"Connecting Project to GitHub","text":"<p>Now that you have created a repository for your project, the only thing left to do is to share it to your GitHub account.</p> <ol> <li> <p>Navigate to 'GitHub' in the 'Git' dropdown and share your project on GitHub. </p> </li> <li> <p>Click 'Share' to start sharing your project files to your GitHub. </p> </li> <li> <p>Click 'Add' to add your files to your GitHub repository. </p> </li> </ol> <p>Success</p> <p>Congratulations, you have successfully connected your project to GitHub. You can now view your repository in your GitHub account.</p> <p>Info</p> <p>Your git controls can be found in the top right of your window. Blue Arrow: Allows you to pull any changes made in the repository and update your project. Green Check Mark: Allows you to commit any changes you have made. This gets your changes ready to be pushed to the repository. Green Arrow: Allows you to push your committed changes onto the repository. Clock: Allows you to view all changes made to the repository. Undo Arrow: Allows you to undo any changes you have added that is not in the repository.</p>"},{"location":"pages/creating-repo/#conclusion","title":"Conclusion","text":"<p>Congratulations\ud83c\udf89, you have successfully learned how to connect your PyCharm project to you GitHub. You can now start coding with others.</p> <p>Lessons learned:</p> <ul> <li> How to add your GitHub account to PyCharm.</li> <li> How to create a repository.</li> <li> How to connect your project to GitHub.</li> <li> Basics of git controls.</li> </ul> <p>You have successfully completed all tasks.  If you have any problems, you can check out the Troubleshooting page by clicking on the 'Next' button below me.</p>"},{"location":"pages/debugging/","title":"Debugging Your Code","text":""},{"location":"pages/debugging/#overview","title":"Overview","text":"<p>This part will go over how to use the debugger in PyCharm IDE. Debugging allows the user to be able to go through their code step by step. This allows users to understand how their code may work. The built-in debugger in PyCharm can also be used for fixing and catching errors. We will go step by step and help you debug your first code.  </p>"},{"location":"pages/debugging/#initiate-debug","title":"Initiate Debug","text":"<p>To start debug process you have to setup the debugger first by placing a breakpoint. </p> <ol> <li> <p>Click in between the line numbers and the code divider. </p> </li> <li> <p>Click the debug icon located in the top right corner. Once you go through the steps you should have a debug console open in the bottom half of the screen. Now you can start to debug!</p> </li> </ol>"},{"location":"pages/debugging/#interacting-with-debugger","title":"Interacting With Debugger","text":"<p>Once the debug console opens up you will be able to start to debug your code. There will be different tasks you can perform with the debug console.</p> <ol> <li> <p>Click the step into icon which is the downward-facing arrow pointing to a line.  This allows you to go line by line in your debug console.</p> </li> <li> <p>Click on the step into my code icon beside the step into icon.  The difference between step 1 and step 2 is that step 2 only steps into your code and not any library classes.</p> </li> <li> <p>Click on the step over icon on the left side of the step into icon.  Step over is used if you do not want to run the current line so you step over this line to the next.</p> </li> <li> <p>Click the step out button in the debug console.  You will step out of the current method to the caller function.</p> </li> <li> <p>Click on the red stop button located on the left side of the debug console.  The stop button stops the execution and returns an error.</p> </li> <li> <p>Repeat step 2 in Initiate Debug and repeat step 1 Interacting With Debugger till the debugger closes. Once the debugging session ends the debugging will close and take you to the console. In the console the program will execute and display the finial information at the end. </p> </li> </ol> <p>Success</p> <p></p>"},{"location":"pages/debugging/#conclusion","title":"Conclusion","text":"<p>Congratulations \ud83c\udf89, now you should be able to go through and debug your code and understand what different debug icons do.!</p> <p>Lessons learned:</p> <ul> <li> How to initiate debug.</li> <li> How to interact with the debugger.</li> </ul> <p>You can now move on to the next step by clicking on the 'Next' button below me. </p> <p>Notes add block of sample code before explain bigger images add info for short cuts</p>"},{"location":"pages/first-project/","title":"Creating Your First Project","text":""},{"location":"pages/first-project/#overview","title":"Overview","text":"<p>In this section, you will be introduced to the basics of PyCharm such as creating your first project and knowing how to write and run your code. You will also learn how to navigate through the settings to change the way your code looks, and as a result, improving your coding experience.</p>"},{"location":"pages/first-project/#creating-a-project","title":"Creating a Project","text":"<p>We will start out by opening up Pycharm and creating a folder for our Python project.</p> <ol> <li> <p>Open up Pycharm and Click on 'New Project'. </p> </li> <li> <p>Replace \"pythonProject\" with any name of your choice to rename your project. </p> </li> <li> <p>Click on 'Create' to finish creating your new project. </p> </li> </ol> <p>Success</p> <p>You have successfully created a new project folder. Your project should now pop up in a new window.</p>"},{"location":"pages/first-project/#writing-python-code","title":"Writing Python Code","text":"<p>After successfully making a project folder in Pycharm, we can now write and run our first Python code.</p> <ol> <li> <p>Make a new Python file by right clicking on your project folder.  After naming your file, you should now be able to see your new Python file under your project folder.</p> </li> <li> <p>Copy this code and paste it onto your IDE.</p> <pre><code>print(\"Hello World\")\n</code></pre> <p></p> </li> <li> <p>Click on the green play button at the top right of your window. </p> <p>Info</p> <p>Alternatively, you can also use Shift+F10 as a shortcut to run your code.</p> </li> </ol> <p>After running your code, a terminal should pop up at the bottom of your window with your output. </p> <p>Success</p> <p>Congratulations, you have written your first Python code! You are now a programmer!</p>"},{"location":"pages/first-project/#editing-preference-settings","title":"Editing Preference Settings","text":"<p>Now, you will learn how to change your settings according to your preferences in order to give yourself a better coding experience.</p> <ol> <li> <p>Open up your settings by navigating to the File dropdown at the top left of your window. </p> <p>Info</p> <p>Alternatively, you can also use Ctrl+Alt+S as a shortcut to open up the settings.</p> </li> <li> <p>Navigate to the 'Font' menu in the 'Editor' dropdown. </p> <p>Info</p> <p>Changing the 'Size' will allow you to edit your font size. Changing the 'Line height' will allow you to edit the spacing between your lines. Opening up the 'Font' dropdown will allow you to view all the available fonts in Pycharm.</p> </li> <li> <p>Navigate to Python in the Code Style dropdown. </p> <p>Info</p> <p>In this menu, you are able to edit your code style settings of your Python code. You can change 'Indent' to edit the sizing of the indentation in your code. You are also able to view tab characters by checking the box of 'Use tab character'.</p> </li> <li> <p>Click 'Apply' to save your changes and 'Ok' to close the window. </p> </li> </ol> <p>Success</p> <p>You can now successfully navigate through your settings to edit your preferences settings.</p>"},{"location":"pages/first-project/#conclusion","title":"Conclusion","text":"<p>Congratulations \ud83c\udf89, you have now learned the basics of PyCharm, and you can now start your Python programming journey!</p> <p>Lessons learned:</p> <ul> <li> How to create a new project folder.</li> <li> How to write and run code.</li> <li> How to edit your preference settings.</li> </ul> <p>You can now move on to the next step by clicking on the 'Next' button below me. </p>"},{"location":"pages/glossary/","title":"Glossary","text":"Term Definition Step Over It steps over the current line to the next. If you step over a method call it executes in one step. Step Out This steps out of the current method and returns you to the caller method. Step Into My Code Only steps into your code and not into any library classes. Step Into allows you to go line by line in your debug console. It steps into steps into your code and any library functions or methods that are in Python's built-in module. breakpoint A breakpoint will tell the built-in debugger to stop executing the code. It is represented by a red square. Pycharm Pycharm is an IDE which is made to provide tools for Python development. IDE A IDE is a Integrated Development Environment. An IDE helps code development by providing a code editor, build tools, and a debugger. Debugger Debugger helps find problems within code. Repository A centralized location where project files and resources can be stored. Github A online hosting platform which provides version control using Git and code hosting Git Git is a version control system which is download locally Version Control Version control is a system used to manage changes to files. Used to track changes to software over time."},{"location":"pages/troubleshooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action No Python interpreter configured You do not have a Python interpreter setup in the configuration. Go to settings and find project interpreter on the left hand side. At the top  of the page it will say <code>no interpreter</code> click on the drop down menu and select the new Python interpreter. Or you can click <code>add interpreter</code> and select <code>add local interpreter</code>. Choose <code>system interpreter</code> then click on the three dots to add path of Python installation. You forget to add a break point while debugging causing it to execute code. Add a breakpoint in between the number of line and divider. Try clicking the debug button again. Failed to create virtual environment Not having virualevn installed on your computer. You can either add a new path to the virtual environment when creating a project or re-install the virtual environment."}]}